import os
#import numpy

report: "report/workflow.rst"

### Below rules will be run locally (head node), not through batch submission:
localrules: all
###

### Config file location:
configfile: "workflow/config.yaml"
refIdxNm=os.path.splitext( os.path.basename(config["inRefFastaURL"]) )[0]

IDS, RUNS = glob_wildcards("data/" + config["doProject"] + "/{sample}_R1_{run}.fastq.gz")
### NB: Need to add logic here for checking whether a sample has more than one run.
### or unpaired files.
### If so, will need to add a step for combining runs.

### Files at leaf nodes:
rule all:
	input:
		"data/reference/" + os.path.basename(config["inRefGtfURL"]),
		"data/reference/" + os.path.basename(config["inRefFastaURL"]),
		expand("results/" + config["doProject"] + "/trimmed_reads/{sample}_R1_{run}_val_1.fq.gz", sample=IDS, run=RUNS),
		expand("results/" + config["doProject"] + "/trimmed_reads/{sample}_R2_{run}_val_2.fq.gz", sample=IDS, run=RUNS),
		expand("results/" + config["doProject"] + "/alignment/{sample}.bam", sample=IDS)

### Download the reference files:
rule getReference:
	output:
		refFasta="data/reference/" + os.path.basename(config["inRefFastaURL"]),
		refGtf="data/reference/" + os.path.basename(config["inRefGtfURL"])
	shell:
		"wget -P data/reference/ " + config["inRefFastaURL"] + ";" +
		"wget -P data/reference/ " + config["inRefGtfURL"] + ";"

### QC for raw files:
rule rawQC:
	output:
		fastqcReads="qc/" + config["doProject"] + "/01_rawFastqc/{sample}_R{read}_{run}_fastqc.zip"
	conda:
		"envs/atac_dataprep.yaml"
	input:
		rawReads="data/" + config["doProject"] + "/{sample}_R{read}_{run}.fastq.gz"
	shell:
		"fastqc {input.rawReads} -o qc/" + config["doProject"] + "/01_rawFastqc/"

### Adapter trim and do fastqc:
rule trimReads:
	output:
		trim1fl="results/" + config["doProject"] + "/trimmed_reads/{sample}_R1_{run}_val_1.fq.gz",
		trim2fl="results/" + config["doProject"] + "/trimmed_reads/{sample}_R2_{run}_val_2.fq.gz",
		trim1qc="qc/" + config["doProject"] + "/02_trimFastqc/{sample}_R1_{run}_val_1_fastqc.zip",
		trim2qc="qc/" + config["doProject"] + "/02_trimFastqc/{sample}_R2_{run}_val_2_fastqc.zip"
	conda:
		"envs/atac_dataprep.yaml"
	input:
		read1fl="data/" + config["doProject"] + "/{sample}_R1_{run}.fastq.gz",
		read2fl="data/" + config["doProject"] + "/{sample}_R2_{run}.fastq.gz"
	threads: 8
	shell:
		"trim_galore " +
		"--paired " +
		"-q 20 --stringency 1 --length 20 " +
		"--nextera " +
		"-o results/" + config["doProject"] + "/trimmed_reads --gzip " +
		"--fastqc --fastqc_args \"-o qc/" + config["doProject"] + "/02_trimFastqc --threads 8\" " +
		"--cores {threads} " +
		"{input.read1fl} {input.read2fl}"

### Build Bowtie2 index for reference genome:
rule buildIndex:
	output:
		refIdxBt2_1="data/reference/{refIdxNm}.1.bt2"
	conda:
		"envs/atac_dataprep.yaml"
	input:
		refFasta=rules.getReference.output.refFasta
	shell:
		"bowtie2-build {refFasta} data/reference/{refIdxNm}"

### Align trimmed reads to genome:
rule alignATAC:
	output:
		sortedBam="results/" + config["doProject"] + "/alignment/{sample}_{run}.bam"
	conda:
		"envs/atac_dataprep.yaml"
	input:
		trim1fl=rules.trimReads.output.trim1fl,
		trim2fl=rules.trimReads.output.trim2fl,
		refIdxBt2_1=rules.buildIndex.output.refIdxBt2_1
	threads: 16
	shell:
		"bowtie2 " +
		"-x data/reference/{refIdxNm} " +
		"-1 {trim1fl} " +
		"-2 {trim2fl} " +
		"-S results/" + config["doProject"] + "/alignment/{sample}_{run}.sam " +
		"-p {threads} " +
		"--local 2> results/" + config["doProject"] + "/alignment/{sample}_{run}.log;"
		"samtools view -bS results/" + config["doProject"] + "/alignment/{sample}_{run}.sam > results/" + config["doProject"] + "/alignment/{sample}_{run}_presort.bam;"
		"samtools sort results/" + config["doProject"] + "/alignment/{sample}_{run}_presort.bam -o results/" + config["doProject"] + "/alignment/{sample}_{run}.bam;"
		"samtools index results/" + config["doProject"] + "/alignment/{sample}_{run}.bam;"
		"rm results/" + config["doProject"] + "/alignment/{sample}_{run}.sam;"
		"rm results/" + config["doProject"] + "/alignment/{sample}_{run}_presort.bam"


### Gather alignment QC metrics:

### ATACseqQC:





#####
#####
#####
